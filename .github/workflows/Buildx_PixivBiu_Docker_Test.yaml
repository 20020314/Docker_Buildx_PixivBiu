# 利用GitHub Action自动构建多框架的docker镜像
name: Buildx_PixivBiu_Docker_Test

on:
  # main分支的push操作会触发当前脚本的执行
  push:
    branches: [ main ]
  # main分支的pr操作会触发当前脚本的执行
#  pull_request:
#    branches: [ main ]
  # 定时任务,分时日月年,为国际标准时间16点,对应中国时间0点
#  schedule:
#    - cron: '0 16 * * *'
  # 点击star时开始任务
#  watch:
#    types: started


jobs:
  Buildx_PixivBiu_Docker_Test:
    # 运行在Ubuntu系统上
    runs-on: ubuntu-latest
    if: "contains(github.event.head_commit.message, 'test')"
    # 步骤
    steps:
      - name: Prepare
        id: prepare
        # IMAGE_NAME ： 镜像名称
        # ALI_ADD ：阿里镜像地址
        # GITHUB_VERSION ： 源码版本
        # DOCKERHUB_VERSION ： DockerHub 镜像版本
        # TAG_VERSION ： 标签版本 zzcabc/pixivbiu-test:2.2.0a
        # TAG_LATEST ： 最新版本 zzcabc/pixivbiu-test:latest
        # ALI_VERSION ：
        # ALI_LATEST :
        run: |
          IMAGE_NAME=pixivbiu-test
          ALI_ADD=registry.cn-hangzhou.aliyuncs.com
          GITHUB_VERSION=$(curl -sX GET "https://api.github.com/repos/txperl/PixivBiu/releases/latest" | awk '/tag_name/{print $4;exit}' FS='[""]')
          DOCKERHUB_VERSION=$(curl -sX GET "https://hub.docker.com/v2/repositories/zzcabc/pixivbiu-test/tags" | awk '{print $610;exit}' FS='[""]')
          TAG_VERSION="${{ secrets.DOCKERHUB_USERNAME }}/${IMAGE_NAME}:${GITHUB_VERSION}"
          TAG_LATEST="${{ secrets.DOCKERHUB_USERNAME }}/${IMAGE_NAME}:latest"
          ALI_VERSION="${ALI_ADD}/${{ secrets.ALIYUN_NAMESPACES }}/${IMAGE_NAME}:${GITHUB_VERSION}"
          ALI_LATEST="${ALI_ADD}/${{ secrets.ALIYUN_NAMESPACES }}/${IMAGE_NAME}:latest"
          echo ::set-output name=github_version::${GITHUB_VERSION}
          echo ::set-output name=dockerhub_version::${DOCKERHUB_VERSION}
          echo ::set-output name=tag_version::${TAG_VERSION}
          echo ::set-output name=tag_latest::${TAG_LATEST}
          echo ::set-output name=ali_version::${ALI_VERSION}
          echo ::set-output name=ali_latest::${ALI_LATEST}
      # 切换到主分支
      - name: Checkout
        uses: actions/checkout@main

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      # 初始化Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      
      # 登录到DockerHub
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      # 登录到阿里镜像仓库
      # - name: Login To Alibaba Cloud Container Registry
      #   run: |
      #     docker login -u ${{ secrets.ALIYUN_USERNAME }} -p ${{ secrets.ALIYUN_PWD }} registry.cn-hangzhou.aliyuncs.com
      
      # 登录到ghcr.io
      # - name: Login to Ghcr.io
      #   uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
      #   with:
      #     registry: ghcr.io
      #     username: ${{ github.actor }}
      #     password: ${{ secrets.TOKEN_GITHUB }}

      # 构建并且推送
      # - name: BuildPyinstaller and Push
      #   id: platforms
      #   uses: docker/build-push-action@v2
      #   with:
      #     platforms: linux/amd64,linux/arm/v7,linux/arm64
      #     file: ./Dockerfile.pyinstallerbuild
      #     context: .
      #     push: true
      #     tags: |
      #       ${{ steps.prepare.outputs.tag_version }}
      #       ${{ steps.prepare.outputs.tag_latest }}




      # - name: 构建镜像复制出来
      #   run: |
      #     docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      #     docker run -d --platform=arm zzcabc/danmuji-test:latest-arm32
      #     docker image ls
      #     docker ps -a

      # - name: 构建镜像复制出来
      #   run: |
      #     docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      #     docker run -d --name amd64 zzcabc/pixivbiu
      #     docker cp amd64:/Pixiv ./Pixiv_AMD64
      #     ls ./Pixiv_AMD64
      #     tar -cvf amd64_${{ steps.prepare.outputs.github_version }}.tar ./Pixiv_AMD64
      #     docker run -d --name arm64 --platform=arm64 zzcabc/pixivbiu 
      #     docker cp arm64:/Pixiv ./Pixiv_ARM64
      #     tar -cvf arm64_${{ steps.prepare.outputs.github_version }}.tar ./Pixiv_ARM64
      #     ls

      # - name: Upload firmware to release
      #   uses: softprops/action-gh-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     tag_name: ${{ steps.prepare.outputs.github_version }}
      #     files: amd64_${{ steps.prepare.outputs.github_version }}.tar
