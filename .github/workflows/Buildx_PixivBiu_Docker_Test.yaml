# 利用GitHub Action自动构建多框架的docker镜像
name: Buildx_PixivBiu_Docker_Test

on:
  # main分支的push操作会触发当前脚本的执行
  push:
    branches: [ master ]
  # main分支的pr操作会触发当前脚本的执行
#  pull_request:
#    branches: [ master ]
  # 定时任务,分时日月年,为国际标准时间16点,对应中国时间0点
#  schedule:
#    - cron: '0 16 * * *'
  # 点击star时开始任务
#  watch:
#    types: started


jobs:
  Buildx_PixivBiu_Docker_Test:
    # 运行在Ubuntu系统上
    runs-on: ubuntu-latest
    # 步骤
    steps:
      - name: Prepare
        if: "contains(github.event.head_commit.message, 'test')"
        id: prepare
        # IMAGE_NAME ： 镜像名称
        # VERSION ： 源码版本
        # DOCKERHUB_VERSION ： DockerHub 镜像版本
        # TAG_VERSION ： 标签版本
        # TAG_LATEST ： 最新版本
        run: |
          IMAGE_NAME=pixivbiu-code
          VERSION=$(curl -sX GET "https://api.github.com/repos/txperl/PixivBiu/releases/latest" | awk '/tag_name/{print $4;exit}' FS='[""]')
          DOCKERHUB_VERSION=$(curl -sX GET "https://hub.docker.com/v2/repositories/zzcabc/pixivbiu-code/tags" | awk '{print $644;exit}' FS='[""]')
          TAG_VERSION="${{ secrets.DOCKERHUB_USERNAME }}/${IMAGE_NAME}:${VERSION}"
          TAG_LATEST="${{ secrets.DOCKERHUB_USERNAME }}/${IMAGE_NAME}:latest"
          echo ::set-output name=image_name::${IMAGE_NAME}
          echo ::set-output name=build_args::${VERSION}
          echo ::set-output name=dockerhub_version::${DOCKERHUB_VERSION}
          echo ::set-output name=tag_version::${TAG_VERSION}
          echo ::set-output name=tag_latest::${TAG_LATEST}
      # 切换到主分支
      - name: Checkout
        if: "contains(github.event.head_commit.message, 'test')"
        uses: actions/checkout@main

      - name: Set up QEMU
        if: "contains(github.event.head_commit.message, 'test')"
        uses: docker/setup-qemu-action@v1

      # 初始化Docker Buildx
      - name: Set up Docker Buildx
        if: "contains(github.event.head_commit.message, 'test')"
        uses: docker/setup-buildx-action@v1

      # 登录到DockerHub
      - name: Login to DockerHub
        if: "contains(github.event.head_commit.message, 'test')"
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      # 构建并且推送
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          platforms: linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64
          file: ./Dockerfile
          context: .
          push: true
          tags: |
            ${{ steps.prepare.outputs.tag_version }}
            ${{ steps.prepare.outputs.tag_latest }}
      